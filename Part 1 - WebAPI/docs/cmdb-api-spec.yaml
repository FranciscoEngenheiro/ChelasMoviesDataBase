openapi: 3.0.1
info:
  title: CMDB API
  description: This is Chelas Movies Database API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:1904/

tags:
- name: Users
- name: Movies
- name: Group
- name: Movies in a Group

paths:
  /users:
    post:
      tags:
      - Users
      summary: Adds a user to the system
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
      x-codegen-request-body-name: user
  /movies:
    get:
      tags:
      - Movies
      summary: Get most popular Movies
      description: By passing in the appropriate options, you can search for the most popular Movies
      operationId: getMovies
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: moviesName
        in: query
        description: name of the movie(s) to get
        schema:
          type: string
      - name: limit
        in: query
        description: maximum number of movies to return
        schema:
          maximum: 250
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        404:
          description: input parameter not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/RequestNotFound'
  /groups:
    get:
      tags:
      - Group
      summary: List all groups
      description: List all groups
      operationId: getAllGroups
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Invalid input
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        404:
          description: Movie not found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: Movie Not found
    post:
      tags:
      - Group
      summary: Adds a new group
      description: adds a new group
      operationId: addGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: true
      responses:
        201:
          description: Group created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewGroupCreated'
        400:
          description: Invalid input, object invalid
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /groups/{groupId}:
    get:
      tags:
      - Group
      summary: List the group details
      description: Get all movies in a group
      operationId: getGroupDetails
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid ID supplied
        404:
          description: Group not found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: Group Not found
    put:
      tags:
      - Group
      summary: Updates a group
      description: Updates a Group in the system
      operationId: updateGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: Group to be updated
        required: true
        schema:
          type: integer
      requestBody:
        description: Group to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: true
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid ID supplied
        404:
          description: Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: Group Not found
    delete:
      tags:
      - Group
      summary: Remove a group
      description: Remove a group by ID
      operationId: removeGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Group removed with success
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ValidObjectRemoved'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid movie ID
        404:
          description: Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: Group Not found
  /groups/{groupId}/movies/{movieId}:
    put:
      tags:
      - Movies in a Group
      summary: Add a new movie to the group given
      description: add a new movie to the group given
      operationId: addMovie
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      - name: movieId
        in: path
        description: A single Movie
        required: true
        schema:
          type: integer
      requestBody:
        description: Movie to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMovie'
        required: true
      responses:
        201:
          description: movie added
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewMovieCreated'
        400:
          description: Invalid Name supplied
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid movie name
        404:
          description: Movie not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: Movie Not found
    delete:
      tags:
      - Movies in a Group
      summary: Remove a movie in the group given
      description: Remove a movie in the group given
      operationId: removeMovie
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      - name: movieId
        in: path
        description: A single Movie
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Movie removed with success
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ValidObjectRemoved'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid movie ID
        404:
          description: Movie or Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: Movie or Group Not found            
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Group:
      required:
      - id
      - name
      - description
      - movies
      - userId
      
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          example: 111222333
        name:
          type: string
          example: Favourite Movies
        description:
          type: string
          example: Group description
        movies:
          type: array
          items: 
            $ref: '#/components/schemas/Movie'
        userId:
          type: integer
    NewGroup:
      required:
      - name
      - description
      - userId
      
      type: object
      properties:
        name:
          type: string
          example: Favourite Movies
        description:
          type: string
          example: Group description
        userId:
          type: integer
    NewGroupCreated:
      required:
      - status
      - group

      type: object
      properties:
        status:
          type: string
          example: Group 1 created with success
        group:
          $ref: '#/components/schemas/Group'
    Movie:
      required:
      - id
      - name
      - description
      - duration
      
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          example: 123456789
        name:
          type: string
          example: Jurassic Park
        description:
          type: string
          example: Movie description
        duration:
          type: integer
          minimum: 0
          example: 180
    NewMovie:
      required:
      - name
      - description
      - duration
      
      type: object
      properties:
        name:
          type: string
          example: Jurassic Park
        description:
          type: string
          example: Movie description
        duration:
          type: integer
          minimum: 0
          example: 180
    NewMovieCreated:
      required:
      - status
      - movie

      type: object
      properties:
        status:
          type: string
          example: Movie with name "Jurassic Park" created with success
        movie:
          $ref: '#/components/schemas/Movie'
    NewUser:
      required:
      - userName

      type: object
      properties:
        userName:
          type: string
          example: joao
    ValidObjectRemoved:
      type: object
      properties:
        message:
          type: string
          example: "Removed with success"
    InvalidRequest:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    RequestNotFound:
      type: object
      properties:
        error:
          type: string
          example: "Request not found"