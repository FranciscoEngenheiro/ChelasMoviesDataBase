openapi: 3.0.1
info:
  title: CMDB API
  description: This is Chelas Movies Database API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:1904/

tags:
- name: Users
- name: Movies
- name: Group
- name: Movies in a Group

paths:
  /users:
    post:
      tags:
      - Users
      summary: Adds a user to the system
      description: Adds a user to the system
      operationId: addUser
      security:
        - bearerAuth: []
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - user
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  token:
                    type: string
                    format: uuid
        400:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
      x-codegen-request-body-name: user
  /movies:
    get:
      tags:
      - Movies
      summary: Get most popular Movies
      description: Search for the most popular movies with a optional parameter to limit the number of return movies (max 250)
      operationId: getMovies
      security:
        - bearerAuth: []
      parameters:
      - name: limit
        in: query
        description: maximum number of movies to return
        schema:
          maximum: 250
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: "Invalid Argument: limit"
  /movies/{moviesName}:
    get:
      tags:
      - Movies
      summary: Search Movies by Name
      description: Search movies by name with a optional parameter to limit the number of return movies (max 250)
      operationId: searchMoviesByName
      security:
        - bearerAuth: []
      parameters:
      - name: moviesName
        in: path
        description: movies to search
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: maximum number of movies to return
        schema:
          maximum: 250
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: "Invalid Argument: limit"
  /groups:
    get:
      tags:
      - Group
      summary: List all groups
      description: List all groups
      operationId: getAllGroups
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    post:
      tags:
      - Group
      summary: Adds a new group
      description: adds a new group
      operationId: addGroup
      security:
        - bearerAuth: []
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: true
      responses:
        201:
          description: Group created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewGroupCreated'
        400:
          description: Group already exists
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: "Invalid Argument: group name"
  /groups/{groupId}:
    get:
      tags:
      - Group
      summary: List the group details
      description: Get all movies in a group
      operationId: getGroupDetails
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: Group not found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: "Argument not found: group"
    put:
      tags:
      - Group
      summary: Edit a group
      description: Edit a Group
      operationId: editGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: Group to be edited
        required: true
        schema:
          type: integer
      requestBody:
        description: Group to be edited
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: true
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                required:
                - message
                type: object
                properties:
                  message:
                    type: string
                    example: "Group updated with success"
        400:
          description: Invalid Request Body 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
                example: "Invalid Argument: Invalid Request Body"
        404:
          description: Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: "Argument not found: group"
    delete:
      tags:
      - Group
      summary: Remove a group
      description: Remove a group by ID
      operationId: removeGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Group removed with success
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ValidObjectRemoved'
        404:
          description: Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: "Argument not found: group"
  /groups/{groupId}/movies/{movieId}:
    put:
      tags:
      - Movies in a Group
      summary: Add a new movie to the group given
      description: add a new movie to the group given
      operationId: addMovie
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      - name: movieId
        in: path
        description: A single Movie
        required: true
        schema:
          type: string
      responses:
        201:
          description: movie added
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewMovieCreated'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: "Invalid Argument: movie already exists"
        404:
          description: Movie or Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: "Argument not found: movie or group"
    delete:
      tags:
      - Movies in a Group
      summary: Remove a movie in the group given
      description: Remove a movie in the group given
      operationId: removeMovie
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: Group of movies
        required: true
        schema:
          type: integer
      - name: movieId
        in: path
        description: A single Movie
        required: true
        schema:
          type: string
      responses:
        200:
          description: Movie removed with success
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ValidObjectRemoved'
        404:
          description: Movie or Group not found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RequestNotFound'
                example: "Argument not found: movie"          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Group:
      required:
      - name
      - description
      - id
      - movies
      - userId
      
      type: object
      properties:
        name:
          type: string
          example: Favourite Movies
        description:
          type: string
          example: Group description
        id:
          type: integer
          minimum: 0
          example: 4
        movies:
          type: array
          items: 
            $ref: '#/components/schemas/Movie'
        userId:
          type: integer
    NewGroup:
      required:
      - name
      - description
      
      type: object
      properties:
        name:
          type: string
          example: Favourite Movies
        description:
          type: string
          example: Group description
    NewGroupCreated:
      required:
      - status
      - group

      type: object
      properties:
        status:
          type: string
          example: Group 1 created with success
        group:
          $ref: '#/components/schemas/Group'
    Movie:
      required:
      - id
      - name
      - duration
      
      type: object
      properties:
        id:
          type: string
          minimum: 0
          example: "tt02345678"
        name:
          type: string
          example: Jurassic Park
        duration:
          type: integer
          minimum: 0
          example: 180
    NewMovieCreated:
      required:
      - status
      - movie

      type: object
      properties:
        status:
          type: string
          example: Movie with name "Jurassic Park" created with success
        movie:
          $ref: '#/components/schemas/Movie'
    ValidObjectRemoved:
      type: object
      properties:
        message:
          type: string
          example: "Removed with success"
    InvalidRequest:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    RequestNotFound:
      type: object
      properties:
        error:
          type: string
          example: "Request not found"